Azuonye Daniel's Class Notes
Ethical Hacking and Cyber Security
September 2024 — 6th Period
________________________________________
Welcome to your reference guide!
Use Ctrl-F to search terms, commands, and definitions easily.
Each section contains a short-form definition followed by more details if needed.
Happy hacking!
________________________________________
INDEX
•	Commands
•	Networking
•	File Permissions & chmod
•	Process Management
•	Package Management
•	Terminology
•	Logic Gates/Boolean
•	Basic Linux Commands
•	Computer Parts
•	Keywords/Abbreviations
•	Linux Basics: sudo, Navigation, File & Directory Management
________________________________________
Commands
1.	ls:
Lists contents of a directory. For a detailed view (including hidden files), use ls -la.
2.	pwd:
Prints your current location (working directory).
Also means (Present working Directory)

3.	cd:
Changes the directory. Use cd .. to move up one level.
4.	mkdir:
Creates a new directory (folder). Example: mkdir myfolder creates a folder named "myfolder."
5.	touch:
Creates an empty file. Example: touch newfile.txt creates a file named "newfile.txt."
6.	rm:
Removes a file. Use rm -r to delete a directory along with its contents.
7.	cp:
Copies files or directories. Example: cp file1.txt /newfolder/ copies file1 to /newfolder/.
8.	mv:
Moves or renames files. Example: mv oldname.txt newname.txt renames the file.
9.	cat:
Shows the contents of a file. Example: cat file.txt displays the content of "file.txt."
10.	echo:
Prints text to the terminal. Example: echo Hello World outputs "Hello World."
11.	man:
Opens the manual for a command. Example: man ls displays the manual for the ls command.
12.	grep:
Searches for a specific pattern of text within files. Example: grep 'text' file.txt looks for "text" inside "file.txt."
13.	find:
Searches for files in a directory hierarchy. Example: find / -name filename looks for files named "filename."
14.	sudo:
Runs a command with elevated privileges. Example: sudo apt-get update.
15.	df:
Displays disk space usage. Use df -h for human-readable sizes.
16.	du:
Displays the size of files and directories. Use du -h for human-readable sizes.
17.	chmod:
Changes file permissions. Example: chmod 755 script.sh grants the owner full permissions and others read/execute permissions.
18.	chown:
Changes file ownership. Example: chown user:group file.txt.
19.	ps:
Displays currently running processes.
20.	kill:
Terminates a process by its ID. Example: kill 1234.
21.	tar:
Compresses or extracts files. Example: tar -cvf archive.tar directory/ creates an archive of the directory.
22.	zip:
Compresses files into a .zip archive. Example: zip archive.zip file1 file2.
23.	unzip:
Extracts files from a .zip archive. Example: unzip archive.zip.
24.	ssh:
Connects to a remote machine via Secure Shell (SSH). Example: ssh user@hostname.
________________________________________
Networking
1.	ifconfig or ip a:
Shows network interfaces and IP addresses.
2.	ping:
Tests network connectivity. Example: ping google.com checks if you can reach Google's servers.
3.	traceroute:
Traces the path packets take to a destination. Example: traceroute google.com.
4.	netstat:
Displays network connections and open ports. Use netstat -tuln for a list of TCP/UDP connections.
5.	nmap:
A tool for scanning open ports and network mapping. Example: nmap localhost scans your own machine.
6.	host:
Finds the IP address of a domain name or the domain name of an IP address. Example: host google.com.
7.	wget:
Downloads files from the internet. Example: wget http://example.com/file.zip.
8.	dig:
Retrieves DNS information about a domain. Example: dig google.com.
9.	iwconfig:
Configures wireless network interfaces on Linux.
10.	ss:
Displays socket statistics.
________________________________________
File Permissions & chmod Examples
1.	chmod:
Changes file permissions with numeric codes. Permissions are broken down as follows:
o	r = Read (4)
o	w = Write (2)
o	x = Execute (1)
Examples:
o	chmod 755 file.sh: Owner has full access (read, write, execute); group and others can only read and execute.
o	chmod 644 file.txt: Owner can read and write; group and others can only read.
o	chmod 777 folder: Everyone has full permissions (read, write, execute).
Common combinations:
o	700: Owner has full access; no access for group or others.
o	600: Owner can read and write; no access for group or others.
o	555: All users can read and execute, but no one can write.
o	400: Only the owner can read; no access for group or others.
2.	chown:
Changes the ownership of a file. Example: sudo chown user:group file.txt changes the owner and group.
3.	ls -l:
Displays file permissions in a detailed format.
________________________________________
Process Management
1.	top:
Shows a list of system processes and their resource usage in real-time.
2.	ps:
Displays a snapshot of running processes at the time.
3.	kill:
Terminates a process using its ID. Example: kill 1234 stops the process with ID 1234.
4.	df:
Shows how much disk space is being used. Use df -h to see human-readable sizes.
5.	du:
Displays the size of directories. Example: du -h foldername shows the size of a directory.
6.	free:
Shows memory (RAM and swap) usage.
________________________________________
Package Management
1.	sudo apt-get update:
Updates the package list to fetch the latest versions available.
2.	sudo apt-get upgrade:
Upgrades all installed packages to the newest version available.
3.	sudo apt-get install:
Installs new software. Example: sudo apt-get install nmap installs the Nmap tool.
4.	sudo apt-get remove:
Removes an installed software package.
________________________________________
Terminology
1.	Ethical Hacking:
The legal practice of breaking into systems to identify weaknesses before malicious hackers do.
2.	Penetration Testing:
Simulates a cyberattack to assess a system's security.
3.	Firewall:
A network security system that controls incoming and outgoing network traffic based on pre-set security rules.
4.	Vulnerability:
A weakness in a system that can be exploited by a threat actor.
5.	Exploit:
A method or piece of code used to take advantage of a vulnerability.
6.	Patch:
An update designed to fix security flaws and vulnerabilities in software.
7.	Malware:
Malicious software designed to damage or disrupt systems (e.g., viruses, worms, ransomware).
8.	Zero-Day:
A vulnerability exploited before the software vendor has issued a fix.
9.	Encryption:
The process of converting data into a secure format to prevent unauthorized access.
10.	IP Address:
A unique identifier assigned to a device on a network.
11.	Port Scanning:
A technique used to probe a system's open ports to identify potential entry points.
________________________________________
Logic Gates/Boolean
A	B	AND	OR	XAND	NOR	NAND
0	1	F	T	F	F	T
1	0	F	T	F	F	T
0	0	F	F	T	T	T
1	1	T	T	T	F	F


Explanation of Gates:
•	AND: True if both inputs are true.
•	OR: True if at least one input is true.
•	XAND (Exclusive AND): True if both inputs are the same.
•	NOR: True if neither input is true.
•	NAND: True if at least one input is false (opposite of AND).

________________________________________
Basic Linux Commands
1.	ls: List contents of a directory.
2.	cd: Change directory.
3.	pwd: Print current working directory.
4.	mkdir/rmdir: Make/remove directories. 
5.	touch: Creates an empty file.
6.	rm: Removes files or directories.
7.	mv: Renames or moves files and directories.
8.	cat: Displays the content of files.
9.	nano: Opens the nano text editor to edit files.
10.	cp: Copies files and directories.
11.	find: Searches for files and directories.
12.	echo: Prints text to the terminal.
13.	chmod: Changes file permissions.
14.	chown: Changes file ownership.
15.	ps: Lists currently running processes.
16.	top: Displays real-time system process statistics.
17.	kill: Terminates a process by its ID.
18.	df: Displays disk usage information.
19.	du: Shows disk usage of directories.
20.	free: Shows memory usage statistics.
21.	sudo: Runs commands with elevated privileges.
________________________________________
Computer Parts
1.	Motherboard: The main circuit board of the computer, connecting all components.
2.	CPU (Central Processing Unit): The brain of the computer, executing instructions.
3.	GPU (Graphics Processing Unit): Handles rendering graphics, particularly useful for gaming or video editing.
4.	RAM (Random Access Memory): Temporary memory that stores data for currently running programs.
5.	SSD (Solid State Drive): Storage device with faster access speeds than traditional hard drives.
6.	Power Supply: Provides power to all components in the computer.
7.	Case: Enclosure that houses the computer components.
8.	Cooler: Used to dissipate heat generated by the CPU and GPU.
________________________________________
Keywords/Abbreviations
1.	IP Address: Internet Protocol, a unique address assigned to each device on a network.
2.	GUI: Graphical User Interface, allows users to interact with a system through visual icons.
3.	DNS: Domain Name System, translates domain names to IP addresses.
4.	OS: Operating System, software that manages hardware and software resources on a computer.

What is sudo and How to Use It
•	sudo stands for "superuser do." It is used to run commands with elevated privileges, typically as the root user, allowing you to perform tasks that require administrative rights.
•	Usage:
o	sudo <command>: Executes the command with superuser privileges.
o	Example: sudo apt-get update will update package lists, which requires administrator privileges.
o	Password Prompt: When you use sudo, it asks for your user password, not the root password.
________________________________________
Navigating Files and Directories
•	Directory: A folder that contains files or other directories. Think of it as an organizational structure for your files.
•	File: A single item that contains data, such as a text document, an image, or a program.
Basic Navigation Commands
1.	pwd: Prints the current working directory. This tells you where you are in the directory structure.
2.	ls: Lists the contents of the current directory.
o	Use ls -la for detailed information, including hidden files.
3.	cd <directory>: Changes the current directory to the specified one.
o	cd .. moves you up one directory level.
o	cd ~ takes you to your home directory.
________________________________________
Creating, Removing, and Editing Files & Folders
Making Directories and Files
1.	mkdir <directory_name>: Creates a new directory (folder).
o	Example: mkdir myfolder creates a directory named "myfolder."
2.	touch <file_name>: Creates an empty file.
o	Example: touch myfile.txt creates an empty file named "myfile.txt."
Removing Directories and Files
1.	rm <file_name>: Removes a file.
o	Example: rm myfile.txt deletes "myfile.txt."
2.	rm -r <directory_name>: Removes a directory and its contents recursively.
o	Example: rm -r myfolder deletes the directory "myfolder" and all files within it.
Editing Files
1.	nano <file_name>: Opens the file in the nano text editor for editing.
o	Example: nano myfile.txt opens "myfile.txt" for editing.
o	Use Ctrl + O to save changes and Ctrl + X to exit the editor.
________________________________________
What Are Directories and Files?
•	Files: The basic units of data storage in a system. Each file contains a set of information, such as text, images, or code, and has a unique name in its directory.
•	Directories (Folders): Containers for organizing files and subdirectories. Directories themselves can be nested, creating a hierarchical structure.
Understanding File Structure:
•	The Linux filesystem is organized in a tree-like structure.
•	The root directory / is at the top, and all other files and directories branch off from it.
•	Common directories include:
o	/home: Contains user-specific directories.
o	/etc: Holds system configuration files.
o	/var: Contains log files and other variable data.
o	/bin: Stores binary executable files (programs).

Learning resources for you to explore during downtime in class.


Free -
Formally Lynda.com now LinkedIn Learning: Home - LinkedIn Learning - Info Guides at Winnipeg Public Library
Paid or freemium-
Coursera -coursera.org/
Grade school CompSci - rexk12.com
cybrary.it
offsec.com
hackaday.com
udemy.com
rapid7.com/blog/tag/metasploit/
canadalearningcode.ca/grow-with-google/
w3schools.com/python/default.asp
codecademy.com
ocw.mit.edu

Linux Command Line Study Guide for Upcoming Spot Checks.
I will be away tomorrow Sept 19th and I want you to prepare for in-class spot checks when I return (Friday, and Monday) where you'll demonstrate your Linux command-line skills using Debian 12 in VMware. Focus on the following key areas:
Objectives
•	Navigate the Linux file system using basic commands.
•	Perform CRUD (Create, Read, Update, Delete) operations on files and directories.
•	Modify file permissions using chmod.
•	Execute commands with superuser privileges using sudo.
________________________________________
1. Navigating the File System
Commands to Practice:
•	pwd — Displays your current directory.
•	ls — Lists files and directories.
o	Options:
	ls -l (detailed view)
	ls -a (shows hidden files)
•	cd — Changes the current directory.
o	Examples:
	cd /path/to/directory (absolute path)
	cd Documents (relative path)
	cd .. (move up one directory)
	cd ~ (go to home directory)
Tips:
•	Use man [command] to read the manual for any command.
•	Google searches like "How to use the ls command in Linux" can provide quick tutorials.
•	Ask ChatGPT for explanations or examples if you're unsure how a command works.
________________________________________
2. CRUD Operations on Files and Directories
Create:
•	touch filename.txt — Creates an empty file.
•	mkdir myfolder — Creates a new directory.
Read:
•	cat filename.txt — Displays the contents of a file.
•	less filename.txt — Allows you to scroll through a file.
Update:
•	nano filename.txt — Opens a file in the Nano text editor.
•	echo "Text" &gt;&gt; filename.txt — Appends text to a file.
Delete:
•	rm filename.txt — Removes a file.
•	rmdir myfolder — Removes an empty directory.
•	rm -r myfolder — Removes a directory and its contents recursively.
Tips:
•	Be cautious with rm commands; deleted files can't be easily recovered.
•	For more examples, search "Basic file operations in Linux" on Google or ask ChatGPT.
________________________________________
3. File Permissions and chmod
Understanding Permissions:
•	Use ls -l to view file permissions.
•	Permissions are shown as -rwxrwxrwx, divided into User (u), Group (g), and Others (o).
o	r — Read (4)
o	w — Write (2)
o	x — Execute (1)
Changing Permissions:
•	Symbolic method:
o	chmod u+x filename — Adds execute permission for the user.
o	chmod g-w filename — Removes write permission from the group.
•	Numeric method:
o	chmod 755 filename — Sets permissions to rwxr-xr-x.
Tips:
•	Practice changing permissions and observe the effects.
•	Online resources like "Understanding chmod in Linux" can be very helpful.
________________________________________
4. Using sudo for Superuser Privileges
Basics:
•	sudo [command] — Runs a command with superuser privileges.
•	Example: sudo apt update — Updates package lists.
Tips:
•	Use sudo carefully to avoid making unintended system changes.
•	If you need clarification, ask ChatGPT or search "How to use sudo in Linux."
________________________________________
Practice Exercises
1.	Navigation and File Management:
•	Create a directory named project and navigate into it.
•	Inside project, create a file called notes.txt.
•	Go back to your home directory.
2.	File Editing and Viewing:
•	Add the text "Hello, Linux!" to notes.txt using echo.
•	View the contents using cat and less.
3.	Permission Changes:
•	Make notes.txt executable.
•	Verify the permission changes with ls -l.
4.	Using sudo:
•	Attempt to create a file in /root using sudo.
•	Update your system's package list with sudo apt update.
________________________________________
Additional Resources
•	Google Searches:
o	Use specific queries like "How to change directory in Linux" for quick answers.
•	ChatGPT:
o	Ask detailed questions for explanations or troubleshooting.
•	Manual Pages:
o	Type man [command] in the terminal for the manual.
•	Online Tutorials:
-
________________________________________
Preparation Tips:
•	Hands-On Practice: The more you use these commands, the more comfortable you'll become.
•	Understand the 'Why': Don't just memorize commands—understand what they do.
•	Ask for Help: If you're stuck, use the resources above or reach out to me during class time and work periods.

danielazuonye@Daniel:~$ su -
Password: Azuonye
root@Daniel:~# usermod -aG sudo danielazuonye
root@Daniel:~# su - danielazuonye
danielazuonye@Daniel:~$ sudo apt update
[sudo] password for danielazuonye: Azuonye
Hit:1 http://deb.debian.org/debian bookworm InRelease
Hit:2 http://security.debian.org/debian-security bookworm-security InRelease
Hit:3 http://deb.debian.org/debian bookworm-updates InRelease
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
All packages are up to date.

GitHub Commands
Summary of Git Commands Used:
 • Initialize Repository: bash - [git init] 
• Configure Git: bash - [git config --global user.name "Your Name"] bash - [git config --global user.email "youremail@example.com"] 
• Check Status: bash - [git status] 
• Stage Files: bash - [git add filename] bash - [git add .]
 • Commit Changes: bash - [git commit -m "message"] 
• View Log: bash - [git log] 
• Create and Switch Branch: bash - [git checkout -b branch-name] 
• Switch Branch: bash - [git checkout branch-name] 
• Merge Branches: bash - [git merge branch-name] 
• Delete Branch: bash - [git branch -d branch-name] 
• Undo Changes in Working Directory: o Using git restore (newer versions): bash - [git restore filename] o Using git checkout (older versions): bash - [git checkout -- filename]
 • Remove Cached File: bash - [git rm --cached filename] 
• Set Alias: bash - [git config --global alias.alias-name command] 
• Tag a Commit: bash - [git tag -a v1.0 -m "message"]
 • Reset Commits: bash - [git reset --soft HEAD~1] bash - [git reset --hard HEAD~1]

Things I should know
1. Basic Linux Commands
Navigating Directories:
•	cd (Change directory): Move between directories.
•	ls (List directory contents): View files and directories.
Creating, Reading, Updating, and Deleting Files:
•	touch (Create a new empty file): Create files.
•	nano (Edit files): Text editor to edit files directly in the terminal.
•	rm (Remove): Delete files.
•	mv (Move or rename files): Move or rename files.
•	cp (Copy files): Duplicate files.
Managing Directories:
•	mkdir (Make directory): Create directories.
•	rmdir (Remove directory): Remove empty directories.
________________________________________
2. Linux Permissions
Viewing File Permissions:
•	ls -l (List in long format): Displays file permissions, ownership, and other details.
Modifying File Permissions:
•	chmod (Change mode): Modify file and directory permissions.
•	chown (Change owner): Change ownership of files and directories.
________________________________________
3. Basic Git Usage
Initializing a Repository:
•	git init: Initialize a new Git repository.
Staging and Committing Changes:
•	git add (Stage changes): Add files to the staging area.
•	git commit -m (Commit changes): Commit staged changes with a message.
Pushing and Pulling:
•	git push: Push local commits to a remote repository (e.g., GitHub).
•	git pull: Pull updates from a remote repository to sync with the local repository.
________________________________________
4. Setting Up Git and GitHub
Installing Tools:
•	Git: Install Git (version control).
•	GitKraken: Install GitKraken (Git GUI client).
Creating and Managing Repositories:
•	Create repositories on GitHub.
•	Collaborating: Add collaborators to work together on GitHub repositories.
________________________________________
5. Basic Terminal Navigation
•	pwd (Print working directory): Check the current directory.
•	find (Find files): Search for files in a directory hierarchy.
•	grep (Search inside files): Search for patterns in files.
________________________________________
6. Managing Text Files
•	nano (Edit files): Simple text editor for creating or editing files.
________________________________________
7. Working with Debian VMs
Installing Debian OS:
•	Install Debian OS using VMware.
Installing Software:
•	apt-get (Package manager for Debian-based systems): Install and manage software packages.
________________________________________
8. Understanding the Linux Filesystem Structure
•	Understanding the basic hierarchy of Linux filesystem (e.g., /home, /var, /etc, /usr, etc.).

Companion Guide for Git Practice Activity
Welcome to your Git practice activity! This guide will help you understand the commands you're using and provide tips for navigating potential issues.
1. Understanding the Terminal and Commands
What is the Terminal?
The terminal is a text-based interface where you type commands to interact with your computer. In Debian 12, you’ll use it to manage your system.
Example:
bash
Copy code
sudo apt update
This command updates your system’s package list to ensure your software is current.
What is sudo?
sudo stands for "superuser do," allowing you to execute commands with elevated (administrator) permissions. Without sudo, certain commands may fail due to lack of permission.
Common Issue: If you see Permission denied, it's likely because you didn't use sudo where required.
________________________________________
2. Installing Software and Handling Errors
Updating the Package List
Before installing any new software, always update the package list to ensure you're fetching the latest versions.
Command:
bash
Copy code
sudo apt update
Troubleshooting Tip: If you encounter an issue like "Unable to fetch repositories", check your internet connection.
Installing Git
Command:
bash
Copy code
sudo apt install git
What it does: Installs Git, a version control system that tracks changes to your project files.
Troubleshooting Tip: If the installation fails, try running sudo apt update first or verify your network connection.
________________________________________
3. Git Basics: Terminology Overview
Here are some basic Git terms you should know:
•	Repository: A directory where Git tracks changes to your files.
•	Commit: A saved snapshot of your project at a particular point in time.
•	Staging Area: Where you place files you intend to commit.
•	Branch: A separate line of development. For example, you can work on a feature branch without affecting the main branch.
•	Merge: Combining changes from one branch into another.
•	Conflict: Occurs when Git detects changes in the same file from different branches and can't automatically reconcile them.
________________________________________
4. Text Editors: Nano vs. Gedit
In this assignment, you'll be editing files using either nano (a command-line editor) or gedit (a graphical editor).
Nano (Recommended)
Nano is a simple, default text editor on most Linux systems.
Command:
bash
Copy code
nano filename
Usage Tips:
•	Use Ctrl + X to exit.
•	Press Y to confirm saving changes and Enter to save the file.
Gedit (Graphical Editor)
Gedit is a graphical editor (similar to Notepad in Windows).
Command:
bash
Copy code
sudo apt install gedit
Troubleshooting Tip: If installing gedit fails, it could be due to missing packages. Stick to nano if problems arise.
________________________________________
5. Common Issues and Troubleshooting
Permission Errors
If you see an error like Permission denied, add sudo before your command. For example:
bash
Copy code
sudo apt install git
File Not Found
If you get a No such file or directory error when navigating directories, double-check the file or directory name.
Solution: Use the command:
bash
Copy code
ls
to list files in the current directory.
________________________________________
6. Understanding Branching and Merging
Git's branching and merging features allow you to work on different features or versions of a project simultaneously.
Main Branch (main)
This is your primary working branch.
Feature Branches (e.g., develop, add-monster)
These branches are where you work on new features or tasks without affecting the main branch.
Switching Branches
Command:
bash
Copy code
git checkout branch-name
Creating a Branch
Command:
bash
Copy code
git checkout -b branch-name
This command creates a new branch and switches to it. Use it when starting a new feature.
Merging Branches
Command:
bash
Copy code
git merge branch-name
This combines changes from one branch (e.g., develop) into another (e.g., main).
Troubleshooting Tip: If you encounter a merge conflict, Git will tell you which files are in conflict. You'll need to manually edit those files to resolve the conflict.
________________________________________
7. Simplifying Your Git Workflow with Aliases
Git aliases allow you to create shortcuts for commonly used commands.
Creating Aliases
•	To create a shortcut for git status:
bash
Copy code
git config --global alias.st status
•	Similarly, create aliases for other commands:
o	git config --global alias.ci commit (for git commit)
o	git config --global alias.co checkout (for git checkout)
o	git config --global alias.br branch (for git branch)
________________________________________
8. Troubleshooting Merge Conflicts
A merge conflict happens when Git can't automatically merge changes. Here's how to resolve it:
1.	Git will show you the conflict markers (e.g., <<<<<<< HEAD).
2.	Open the conflicting file and decide which changes to keep.
3.	Remove the conflict markers once resolved.
Command to finalize the resolution:
bash
Copy code
git add filename
git commit -m "Resolve merge conflict"
________________________________________
9. Undoing Changes
Restoring Files to Their Last Committed State
Command:
bash
Copy code
git restore filename
In older Git versions, use:
bash
Copy code
git checkout -- filename
Undoing Commits
•	To undo the last commit but keep your changes:
bash
Copy code
git reset --soft HEAD~1
•	To undo the commit and discard all changes:
bash
Copy code
git reset --hard HEAD~1
Warning: Be careful with --hard, as it deletes your changes permanently.
________________________________________
10. General Tips for Success
•	Take it slow: If you're new to Git or the terminal, go step-by-step. Don’t rush, and don’t hesitate to experiment.
•	Ask for help: If you’re stuck, search for solutions online or ask for guidance.
•	Practice regularly: Git is a powerful tool, and regular use will make you more comfortable.
________________________________________
Conclusion
This guide should help clarify the commands and steps in your assignment. Git is flexible, so don’t worry about making mistakes—Git’s ability to undo changes makes it a great tool for experimenting and learning. Good luck, and happy coding!

Objective:
In this assignment, you will expand your "class notes" with thorough research on Bash scripting, system monitoring, and system security. This will help you prepare for an upcoming project where you'll apply these skills. Here's how you will approach this:
1.	Research key topics:
o	Bash Scripting
o	System Monitoring
o	System Security
2.	Update your "class notes" with definitions, commands, examples, and instructions. Stay organized by separating the topics.
3.	Use Git to track changes, making regular commits. You should log at least two commits per class and push them to your GitHub repository.
________________________________________
Part 1: Bash Scripting
1. Definition: What is a Bash script? What are its uses in Linux?
A Bash script is simply a text file containing a series of commands that are executed by the Bash shell (which is the command-line interpreter used by most Linux systems). It helps automate repetitive tasks or processes that would otherwise be done manually.
Uses of Bash scripts in Linux:
•	Automating tasks: Scripts can automate routine tasks like cleaning up files, updating software, or backing up data.
•	System maintenance: Admins use scripts to monitor system health, check logs, and manage resources.
•	Task scheduling: Combined with tools like cron, Bash scripts are scheduled to run automatically at specified times.
•	Managing files: Scripts are often used for file management tasks like renaming files, moving files to different directories, or deleting old files.
2. Basic Syntax: How to write a simple Bash script
•	Every Bash script starts with a shebang (#!/bin/bash), which tells the system that this file should be run in the Bash shell.
Example of a simple script:
bash
Copy code
#!/bin/bash
echo "Hello, World!"
Let’s break it down:
•	#!/bin/bash tells the system to use the Bash interpreter.
•	echo "Hello, World!" is a command that prints the text “Hello, World!” to the terminal.
Using variables:
•	Variables store values that you can reuse in your script. You don’t need to declare the type of the variable (as you do in other programming languages like Python or Java).
Example:
bash
Copy code
#!/bin/bash
NAME="John"
echo "Hello, $NAME"
Here:
•	NAME="John" sets the variable NAME to "John".
•	$NAME is used to access the value stored in NAME.
Control structures (e.g., if-else, for and while loops):
Control structures allow you to make decisions and repeat actions in your script.
•	If-else: Executes code based on a condition.
bash
Copy code
#!/bin/bash
if [ $NAME == "John" ]; then
  echo "Hi, John!"
else
  echo "You are not John."
fi
•	For loop: Repeats a set of commands for each item in a list.
bash
Copy code
#!/bin/bash
for i in 1 2 3 4 5; do
  echo "Number: $i"
done
This will print numbers from 1 to 5.
•	While loop: Repeats commands as long as a condition is true.
bash
Copy code
#!/bin/bash
counter=1
while [ $counter -le 5 ]; do
  echo "Counter: $counter"
  counter=$((counter + 1))
done
This will print the counter value from 1 to 5.
3. Key Bash Commands
•	echo: Prints text or variables to the screen.
o	Example: echo "This is Bash scripting"
•	read: Accepts user input.
o	Example:
bash
Copy code
read -p "Enter your name: " name
echo "Hello, $name"
•	touch: Creates an empty file.
o	Example: touch myfile.txt
•	rm: Deletes a file.
o	Example: rm myfile.txt
•	chmod: Changes file permissions.
o	Example: chmod +x script.sh (Makes the file executable)
4. Self-Made Instructions:
Let’s write a small Bash script that checks if a directory exists, and if not, creates it.
1.	Open a text editor like nano and create a new file:
bash
Copy code
nano check_directory.sh
2.	Write this script inside check_directory.sh:
bash
Copy code
#!/bin/bash
if [ -d "myfolder" ]; then
  echo "Directory already exists."
else
  echo "Directory does not exist. Creating it now..."
  mkdir myfolder
  echo "Directory created."
fi
3.	Save the file by pressing Ctrl + X, then Y, then Enter.
4.	Make the script executable:
bash
Copy code
chmod +x check_directory.sh
5.	Run the script:
bash
Copy code
./check_directory.sh
This script will check if the directory named myfolder exists, and if it doesn't, it will create the directory.
________________________________________
Part 2: System Monitoring
1. Definition: What is system monitoring? Why is it important?
System monitoring refers to the process of tracking and observing a system’s performance metrics such as CPU usage, memory usage, disk space, and network traffic. It helps ensure that the system is running smoothly, and it can alert you to potential issues before they become critical.
Why is system monitoring important?
•	Detect performance bottlenecks: Identify when the system resources (like CPU or memory) are being overused.
•	Prevent system failures: By catching issues early, you can prevent crashes or downtime.
•	Historical data: Monitoring provides data for future resource planning.
2. Key Tools for System Monitoring
•	top: Displays real-time information about running processes, CPU usage, and memory usage.
o	Example:
bash
Copy code
top
Use top to see which processes are consuming the most CPU and memory.
•	htop: A more user-friendly and colorful version of top. It shows real-time system statistics, including CPU usage, memory, swap usage, and running processes.
o	To use htop, you may need to install it:
bash
Copy code
sudo apt-get install htop
htop
•	df: Shows the amount of disk space used and available on the system.
o	Example:
bash
Copy code
df -h
The -h flag makes the output "human-readable," showing sizes in MB, GB, etc.
•	uptime: Tells you how long the system has been running and gives information about system load.
o	Example:
bash
Copy code
uptime
3. Log Monitoring
System logs are important for tracking system activity and troubleshooting problems. These logs are stored in the /var/log directory.
•	journalctl: This command is used to view logs from systemd, the system and service manager for Linux.
o	Example: View recent system logs:
bash
Copy code
journalctl -xe
•	Logs in /var/log: This directory contains many log files. For example:
o	/var/log/syslog: Contains system activity logs.
o	/var/log/auth.log: Contains login-related logs (useful for security monitoring).
To view a log, use the cat or less commands.
Example:
bash
Copy code
cat /var/log/syslog
4. Self-Made Instructions:
To monitor system resource usage:
1.	Use htop for real-time information on CPU and memory usage:
bash
Copy code
htop
Press q to quit.
2.	Check disk space with df:
bash
Copy code
df -h
3.	View logs to identify potential system issues:
bash
Copy code
journalctl -xe
________________________________________
Part 3: System Security
1. Definition: What are basic system security principles on Linux?
Linux security is based on controlling access and ensuring that users and processes can only do what they are allowed to do. Some of the key principles include:
•	Least privilege: Users and processes should have the minimum level of access they need to function.
•	File permissions: Controlling who can read, write, or execute a file.
•	User management: Controlling who has access to the system and what actions they can perform.
•	Firewall: Blocking unwanted network traffic to protect the system from attacks.
2. File Permissions
Each file and directory in Linux has permissions that determine who can read, write, and execute it.
•	Read (r): The ability to view the file or directory.
•	Write (w): The ability to modify or delete the file or directory.
•	Execute (x): The ability to run the file as a program or access the directory.
Using chmod, chown, and ls -l:
•	ls -l: Displays a long listing of files, including their permissions.
o	Example:
bash
Copy code
ls -l
The first column shows the permissions of each file.
•	chmod: Changes file permissions. Use it to grant or revoke read, write, or execute permissions.
o	Example: To make a file executable:
bash
Copy code
chmod +x script.sh
•	chown: Changes the ownership of a file or directory.
o	Example: Change the owner of a file:
bash
Copy code
sudo chown user1 file.txt
3. User Management
Managing users in Linux involves adding, modifying, and removing users.
•	adduser: Adds a new user to the system.
o	Example:
bash
Copy code
sudo adduser newuser
•	usermod: Modifies an existing user’s account.
o	Example: Add a user to the sudo group to give them administrative privileges:
bash
Copy code
sudo usermod -aG sudo newuser
•	deluser: Removes a user from the system.
o	Example:
bash
Copy code
sudo deluser newuser
4. Firewall Basics
Linux uses the Uncomplicated Firewall (ufw) to manage incoming and outgoing network traffic.
•	Enable the firewall:
bash
Copy code
sudo ufw enable
•	Allow traffic on specific ports (for example, allow HTTP traffic on port 80):
bash
Copy code
sudo ufw allow 80/tcp
5. Self-Made Instructions:
To secure a folder and set up basic firewall rules:
1.	Use chmod to make a directory accessible only to the owner:
bash
Copy code
chmod 700 foldername
2.	Enable the firewall using ufw:
bash
Copy code
sudo ufw enable
________________________________________
Using Git for Updates
Requirements:
1.	Commit your changes regularly.
Example commit message:
bash
Copy code
git commit -m "Added Bash script examples"
2.	Push your commits to your GitHub repository:
bash
Copy code
git push origin main

Bash Scripting Basics
1. What is #!/bin/bash?
•	#!/bin/bash is called a shebang. It tells the system which interpreter to use to execute the script.
•	In this case, #!/bin/bash specifies that the script should be run using the Bash shell.
2. What is echo and How to Use It?
•	echo is a command used to display text or output a message to the terminal.
•	Syntax:
bash
Copy code
echo [options] [text]
•	Example:
bash
Copy code
echo "Hello, World!"
This will print Hello, World! to the terminal.
3. What is read and How to Use It?
•	read is a command used to take input from the user and store it in a variable.
•	Syntax:
bash
Copy code
read [variable_name]
•	Example:
bash
Copy code
echo "Enter your name:"
read name
echo "Hello, $name!"
In this example, the script asks for the user's name, stores it in the variable name, and then prints a greeting using that variable.
4. What is a Variable?
•	A variable is a storage location where you can store values like strings, numbers, etc. Variables make it easier to reuse values in your script.
5. How to Declare a Variable?
•	Variables are declared by assigning a value to a name without any spaces around the equals sign (=).
•	Syntax:
bash
Copy code
variable_name=value
•	Example:
bash
Copy code
name="Daniel"
6. How to Call a Variable in Context?
•	To use or reference a variable in a script, prefix its name with a $.
•	Example:
bash
Copy code
echo "Hello, $name!"
This will print Hello, Daniel! if name="Daniel" was declared earlier in the script.

Explanation of the Script Concepts (from Least Complex to Most Complex):
Comments (#):

In the script, anything written after a # symbol is ignored by the computer. It’s called a comment. Comments are used to explain the code to anyone reading it, so they know what each part does. Comments are important to help you understand what you are working on or were trying to do in your code and act as reminders. There is no limit to the amount of comments or their detail you should or could have.
echo:

The echo command is used to display a message on the screen. It's like making the computer "say" something to the user. These are useful for you display prompts, comments or instructions to the user.
The echo command is also a useful tool to test your code. Putting in an echo both inside and outside an if block can help you see what is working in your code or what is broken. echo statements used fir troubleshooting should always be removed when troubleshooting is complete.
Variables:

Variables are like containers that store values. In this script, age_years and age_days are variables.
read -p "Enter your age in years: " age_years takes the user's input and stores it in the age_years variable.
Tip: you can use an echo to display the value of a variable for troubleshooting purposes.
if Statement:

The if statement is used to check if something is true. It helps us control which parts of the script run based on a condition.
For example, we use if to make sure the user’s input is valid.
Regex (^[0-9]+$):

This part is a pattern used to match text. It’s called a "regular expression" (or regex).
^[0-9]+$ means that the input must be made up of digits (0-9), and nothing else. This makes sure the user only types numbers.
^ means "start of input" and $ means "end of input". [0-9] means any digit, and + means "at least one or more".
Resource to learning more about Regex: regexlearn.com/learn/regex101

Tip: Once you have typed or followed the instructions - hit the enter key to progress.
Resource for testing and playing with Regex: regex101.com/

[[ ]] and !~:

[[ ]] is used to test conditions in Bash. It helps make the script safer and easier to write.
!~ means "does not match". In this script, [[ ! $age_years =~ ^[0-9]+$ ]] checks if the input does not match the pattern (meaning it’s not a number).
Tip: Other symbols you may want to explore are ==, |&nbsp;, &nbsp;&gt;&nbsp;, &nbsp;&lt;&nbsp;, -eq, -ne, -gt.

We refer to these symbols as "Conditionals" and there are many more conditionals than what I have listed here.
 Arithmetic Calculation ($(( ))):

$(( )) is used to do math calculations in Bash.
age_days=$((age_years * 365)) calculates how many days are in the given number of years. It multiplies age_years by 365.
Exit Code (exit 1):

exit 1 ends the script. The number 1 is an error code, which means something went wrong.
If the user types something that’s not a valid number, the script stops here.
Tip: use an echo statement to give a clear message to yourself, and your user about what happened.











